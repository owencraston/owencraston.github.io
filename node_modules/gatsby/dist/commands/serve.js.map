{"version":3,"sources":["../../src/commands/serve.ts"],"names":["telemetry","trackCli","readMatchPaths","program","filePath","path","join","directory","rawJSON","fs","readFile","error","report","warn","chalk","bold","JSON","parse","matchPathRouter","matchPaths","options","req","res","next","url","accepts","matchPath","find","sendFile","err","module","exports","startBackgroundUpdate","prefixPaths","port","open","host","parseInt","configModule","config","pathPrefix","configPathPrefix","root","app","router","express","Router","use","expressMiddleware","static","dotfiles","compiledFunctionsDir","functions","readFileSync","e","any","urlencoded","extended","_","cookies","headers","cookie","text","json","raw","pathFragment","params","functionObj","functionRoute","some","f","exp","keys","exec","matches","match","slice","newParams","forEach","index","name","pathToFunction","absoluteCompiledFilePath","start","Date","now","require","cache","resolve","fn","fnToExecute","default","Promise","console","headersSent","sendStatus","end","log","GraphQLEngine","getData","renderPageData","renderHTML","graphqlEngine","dbPath","get","requestedPagePath","pagePath","potentialPagePath","page","findPageByPath","mode","data","pathName","results","serverDataHeaders","value","Object","entries","setHeader","send","status","header","printInstructions","appName","urls","lanUrlForTerminal","localUrlForTerminal","startListening","listen","ssl","sitePackageJson","info","localUrlForBrowser","catch","message"],"mappings":"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","sourcesContent":["import path from \"path\"\nimport openurl from \"better-opn\"\nimport fs from \"fs-extra\"\nimport compression from \"compression\"\nimport express from \"express\"\nimport chalk from \"chalk\"\nimport { match as reachMatch } from \"@gatsbyjs/reach-router/lib/utils\"\nimport onExit from \"signal-exit\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport multer from \"multer\"\nimport pathToRegexp from \"path-to-regexp\"\nimport cookie from \"cookie\"\nimport telemetry from \"gatsby-telemetry\"\n\nimport { detectPortInUseAndPrompt } from \"../utils/detect-port-in-use-and-prompt\"\nimport { getConfigFile } from \"../bootstrap/get-config-file\"\nimport { preferDefault } from \"../bootstrap/prefer-default\"\nimport { IProgram } from \"./types\"\nimport { IPreparedUrls, prepareUrls } from \"../utils/prepare-urls\"\nimport { IGatsbyFunction } from \"../redux/types\"\nimport { reverseFixedPagePath } from \"../utils/page-data\"\n\ninterface IMatchPath {\n  path: string\n  matchPath: string\n}\n\ninterface IPathToRegexpKey {\n  name: string | number\n  prefix: string\n  suffix: string\n  pattern: string\n  modifier: string\n}\n\ninterface IServeProgram extends IProgram {\n  prefixPaths: boolean\n}\n\nonExit(() => {\n  telemetry.trackCli(`SERVE_STOP`)\n})\n\nconst readMatchPaths = async (\n  program: IServeProgram\n): Promise<Array<IMatchPath>> => {\n  const filePath = path.join(program.directory, `.cache`, `match-paths.json`)\n  let rawJSON = `[]`\n  try {\n    rawJSON = await fs.readFile(filePath, `utf8`)\n  } catch (error) {\n    report.warn(error)\n    report.warn(\n      `Could not read ${chalk.bold(\n        `match-paths.json`\n      )} from the .cache directory`\n    )\n    report.warn(\n      `Client-side routing will not work correctly. Maybe you need to re-run ${chalk.bold(\n        `gatsby build`\n      )}?`\n    )\n  }\n  return JSON.parse(rawJSON) as Array<IMatchPath>\n}\n\nconst matchPathRouter =\n  (\n    matchPaths: Array<IMatchPath>,\n    options: {\n      root: string\n    }\n  ) =>\n  (\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ): void => {\n    const { url } = req\n    if (req.accepts(`html`)) {\n      const matchPath = matchPaths.find(\n        ({ matchPath }) => reachMatch(matchPath, url) !== null\n      )\n      if (matchPath) {\n        return res.sendFile(\n          path.join(matchPath.path, `index.html`),\n          options,\n          err => {\n            if (err) {\n              next()\n            }\n          }\n        )\n      }\n    }\n    return next()\n  }\n\nmodule.exports = async (program: IServeProgram): Promise<void> => {\n  telemetry.trackCli(`SERVE_START`)\n  telemetry.startBackgroundUpdate()\n  let { prefixPaths, port, open, host } = program\n  port = typeof port === `string` ? parseInt(port, 10) : port\n\n  const { configModule } = await getConfigFile(\n    program.directory,\n    `gatsby-config`\n  )\n  const config = preferDefault(configModule)\n\n  const { pathPrefix: configPathPrefix } = config || {}\n\n  const pathPrefix = prefixPaths && configPathPrefix ? configPathPrefix : `/`\n\n  const root = path.join(program.directory, `public`)\n\n  const app = express()\n  // eslint-disable-next-line new-cap\n  const router = express.Router()\n\n  app.use(telemetry.expressMiddleware(`SERVE`))\n\n  router.use(compression())\n  router.use(express.static(`public`, { dotfiles: `allow` }))\n\n  const compiledFunctionsDir = path.join(\n    program.directory,\n    `.cache`,\n    `functions`\n  )\n\n  let functions: Array<IGatsbyFunction> = []\n  try {\n    functions = JSON.parse(\n      fs.readFileSync(path.join(compiledFunctionsDir, `manifest.json`), `utf-8`)\n    )\n  } catch (e) {\n    // ignore\n  }\n\n  if (functions) {\n    app.use(\n      `/api/*`,\n      multer().any(),\n      express.urlencoded({ extended: true }),\n      (req, _, next) => {\n        const cookies = req.headers.cookie\n\n        if (!cookies) {\n          return next()\n        }\n\n        req.cookies = cookie.parse(cookies)\n\n        return next()\n      },\n      express.text(),\n      express.json(),\n      express.raw(),\n      async (req, res, next) => {\n        const { \"0\": pathFragment } = req.params\n\n        // Check first for exact matches.\n        let functionObj = functions.find(\n          ({ functionRoute }) => functionRoute === pathFragment\n        )\n\n        if (!functionObj) {\n          // Check if there's any matchPaths that match.\n          // We loop until we find the first match.\n          functions.some(f => {\n            let exp\n            const keys: Array<IPathToRegexpKey> = []\n            if (f.matchPath) {\n              exp = pathToRegexp(f.matchPath, keys)\n            }\n            if (exp && exp.exec(pathFragment) !== null) {\n              functionObj = f\n              // @ts-ignore - TS bug? https://stackoverflow.com/questions/50234481/typescript-2-8-3-type-must-have-a-symbol-iterator-method-that-returns-an-iterato\n              const matches = [...pathFragment.match(exp)].slice(1)\n              const newParams = {}\n              matches.forEach(\n                (match, index) => (newParams[keys[index].name] = match)\n              )\n              req.params = newParams\n\n              return true\n            } else {\n              return false\n            }\n          })\n        }\n\n        if (functionObj) {\n          const pathToFunction = functionObj.absoluteCompiledFilePath\n          const start = Date.now()\n\n          try {\n            delete require.cache[require.resolve(pathToFunction)]\n            const fn = require(pathToFunction)\n\n            const fnToExecute = (fn && fn.default) || fn\n\n            await Promise.resolve(fnToExecute(req, res))\n          } catch (e) {\n            console.error(e)\n            // Don't send the error if that would cause another error.\n            if (!res.headersSent) {\n              res.sendStatus(500)\n            }\n          }\n\n          const end = Date.now()\n          console.log(\n            `Executed function \"/api/${functionObj.functionRoute}\" in ${\n              end - start\n            }ms`\n          )\n\n          return\n        } else {\n          next()\n        }\n      }\n    )\n  }\n\n  // Handle SSR & DSR Pages\n  if (_CFLAGS_.GATSBY_MAJOR === `4`) {\n    try {\n      const { GraphQLEngine } = require(path.join(\n        program.directory,\n        `.cache`,\n        `query-engine`\n      )) as typeof import(\"../schema/graphql-engine/entry\")\n      const { getData, renderPageData, renderHTML } = require(path.join(\n        program.directory,\n        `.cache`,\n        `page-ssr`\n      )) as typeof import(\"../utils/page-ssr-module/entry\")\n      const graphqlEngine = new GraphQLEngine({\n        dbPath: path.join(program.directory, `.cache`, `data`, `datastore`),\n      })\n\n      app.get(\n        `/page-data/:pagePath(*)/page-data.json`,\n        async (req, res, next) => {\n          const requestedPagePath = req.params.pagePath\n          if (!requestedPagePath) {\n            return void next()\n          }\n\n          const potentialPagePath = reverseFixedPagePath(requestedPagePath)\n          const page = graphqlEngine.findPageByPath(potentialPagePath)\n\n          if (page && (page.mode === `DSR` || page.mode === `SSR`)) {\n            const data = await getData({\n              pathName: req.path,\n              graphqlEngine,\n              req,\n            })\n            const results = await renderPageData({ data })\n            if (page.mode === `SSR` && data.serverDataHeaders) {\n              for (const [name, value] of Object.entries(\n                data.serverDataHeaders\n              )) {\n                res.setHeader(name, value)\n              }\n            }\n            return void res.send(results)\n          }\n\n          return void next()\n        }\n      )\n\n      router.use(async (req, res, next) => {\n        if (req.accepts(`html`)) {\n          const potentialPagePath = req.path\n          const page = graphqlEngine.findPageByPath(potentialPagePath)\n\n          if (page && (page.mode === `DSR` || page.mode === `SSR`)) {\n            const data = await getData({\n              pathName: potentialPagePath,\n              graphqlEngine,\n              req,\n            })\n            const results = await renderHTML({ data })\n            if (page.mode === `SSR` && data.serverDataHeaders) {\n              for (const [name, value] of Object.entries(\n                data.serverDataHeaders\n              )) {\n                res.setHeader(name, value)\n              }\n            }\n            return res.send(results)\n          }\n\n          return res.status(404).sendFile(`404.html`, { root })\n        }\n        return next()\n      })\n    } catch (error) {\n      // TODO: Handle case of engine not being generated\n    }\n  }\n\n  const matchPaths = await readMatchPaths(program)\n  router.use(matchPathRouter(matchPaths, { root }))\n\n  // TODO: Remove/merge with above same block\n  router.use((req, res, next) => {\n    if (req.accepts(`html`)) {\n      return res.status(404).sendFile(`404.html`, { root })\n    }\n    return next()\n  })\n  app.use(function (\n    _: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ) {\n    res.header(`Access-Control-Allow-Origin`, `*`)\n    res.header(\n      `Access-Control-Allow-Headers`,\n      `Origin, X-Requested-With, Content-Type, Accept`\n    )\n    next()\n  })\n  app.use(pathPrefix, router)\n\n  function printInstructions(appName: string, urls: IPreparedUrls): void {\n    console.log()\n    console.log(`You can now view ${chalk.bold(appName)} in the browser.`)\n    console.log()\n\n    if (urls.lanUrlForTerminal) {\n      console.log(\n        `  ${chalk.bold(`Local:`)}            ${urls.localUrlForTerminal}`\n      )\n      console.log(\n        `  ${chalk.bold(`On Your Network:`)}  ${urls.lanUrlForTerminal}`\n      )\n    } else {\n      console.log(`  ${urls.localUrlForTerminal}`)\n    }\n  }\n\n  const startListening = (): void => {\n    app.listen(port, host, () => {\n      const urls = prepareUrls(\n        program.ssl ? `https` : `http`,\n        program.host,\n        port\n      )\n      printInstructions(\n        program.sitePackageJson.name || `(Unnamed package)`,\n        urls\n      )\n      if (open) {\n        report.info(`Opening browser...`)\n        Promise.resolve(openurl(urls.localUrlForBrowser)).catch(() =>\n          report.warn(`Browser not opened because no browser was found`)\n        )\n      }\n    })\n  }\n\n  try {\n    port = await detectPortInUseAndPrompt(port)\n    startListening()\n  } catch (e) {\n    if (e.message === `USER_REJECTED`) {\n      return\n    }\n\n    throw e\n  }\n}\n"],"file":"serve.js"}