{
    "componentChunkName": "component---src-templates-blogs-post-js",
    "path": "/post-2/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Owen Craston"}},"markdownRemark":{"id":"017be433-deb8-5dea-b3a9-b0f2b67a96a1","excerpt":"Common Data Structures in Kotlin Recently, I have been using a lot more data structures in Kotlin but found there was a lack of information…","rawMarkdownBody":"\n# Common Data Structures in Kotlin\nRecently, I have been using a lot more data structures in Kotlin but found there was a lack of information for `Kotlin` vs its older brother, `Java`. Here, I have tried to compile a list of common data structures with their runtimes and syntax in Kotlin. \nIt's worth noting that because `Kotlin is backwards compatible with Java`, you may use all the [collections you are used to in Java](https://docs.oracle.com/javase/7/docs/api/java/util/Collections.html). The main difference between [Kotlin collections](https://kotlinlang.org/docs/collections-overview.html) and its Java counterpart, is the concept of a [mutable collection](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-collection/). `Immutable collections are read only`, where as the mutable collections allow for adding, removing and updating elements in the collection. Since `mutable` collections are inherently ...mutable... you do not need to instantiate them with `var` as the reference will not be changing - only the contents of the collection will change. \n\n## Arrays\n[Arrays in Kotlin](https://kotlinlang.org/docs/basic-types.html#arrays) are primitive data structures that are fixed in size, and allow for getting and setting values in constant time.\n\n### Creating an Array\n- Using `arrayOf`\n\t-  Here you can pass in the values for the array and the array will be created with the proper size, type and elements\n\t- You can also use `arrayOfNulls` to create an array of a given size with all null values\n```Kotlin\n\t// Create an array with values\n\tval nums1 = arrayOf(1, 2, 3, 4)   //implicit type declaration\n\tval nums2 = arrayOf<Int>(1, 2, 3) //explicit type declaration\n\t// Creates an Array<Int?> of size 4 with values [null, null, null, null]\n\tval nulls: Array<Int?> = arrayOfNulls<Int>(4)\n```\n- Using the Array `constructor`\n- The constructor takes...\n\t- The size of the array\n\t- A function that returns the array value given an index \n```Kotlin\n\t// Creates an Array<Int> with values [0, 1, 2, 3, 4]\n\tval nums = Array(5) { i -> i}\n\t// Creates an Array<String> with values [\"0\", \"1\", \"4\", \"9\", \"16\"]\n\tval strings = Array(5) { i -> (i * i).toString() }\n```\n### Primitive Arrays\nKotlin also provides Array classes for primitives that can offer some nice syntax. The options are the following\n- ByteArray\n- CharArray\n- ShortArray\n- IntArray\n- LongArray\n- DoubleArray\n- FloatArray\n- BooleanArray\n\nYou can create these arrays by passing the values of the array, the size of the array or the size and a lambda expression.\n```Kotlin\n\t// Array of int of size 3 with values [1, 2, 3]\n\tvar arr1 =  intArrayOf(1, 2, 3)\n\t// Array of booleans of size 3 with values [true, false, true]\n\tvar arr2 =  booleanArrayOf(true, false, true)\n\t// Array of int of size 5 with values [0, 0, 0, 0, 0]\n\tval arr3 = IntArray(5)\n\t// Array of chars of size 5 with values [, , , , ]\n\tval arr4 = CharArray(5)\n\t// Array of int of size 5 with values [42, 42, 42, 42, 42]  \n\tval arr5 =  IntArray(5)  {  42  }\n\t// Array of int of size 5 with values [0, 1, 2, 3, 4] \n\t// (values initialised to their index value)  \n\tvar arr6 =  IntArray(5)  { it -> it  }\n```\n\n ### Array Methods and Runtimes\n\n| Action                | Method                  | Time Complexity | Alternative          |\n|-----------------------|-------------------------|---------|----------------------|\n| Access value at index | array.get(index)        | O(1)    | array[index]         |\n| Set value at index    | array.set(index, value) | O(1)    | array[index] = value |\n| Sort array in place by natural order    | array.sort() | O(nlogn)    | |\n| Sort array in place in reverse order    | array.sortDescending()| O(nlogn)    | |\n\n## Lists\nSimilarly to the [Java list](https://docs.oracle.com/javase/8/docs/api/java/util/List.html), the [Kotlin List](https://kotlinlang.org/docs/collections-overview.html#list) is an interface that allows you to store elements in a specified order with indexed access to these elements. It also allows for the growing and shrinking of the list (if the list is mutable). The default implementation of `List` in Kotlin is an [ArrayList](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/) but others are available. \n\n### Creating A List\n- A `read only` list can be created using the `listOf()` function.\n```kotlin\nval numbers = listOf(\"one\", \"two\", \"three\", \"four\") //implicit type declaration\nval numbers2 = listOf<String>(\"one\", \"two\", \"three\", \"four\") // explicit type declaration\n```\n- A mutable list can be created using `mutableListOf()`\n```kotlin\nval numbers = mutableListOf(1, 2, 3, 4) //implicit type declaration\nval numbers2 = mutableListOf<Int>(1, 2, 3, 4) // explicit type declaration\n```\n### List Methods and Runtimes\n| Action                                                                                                                                                      | Method                                                                                  | Runtime                                                                                                                          |\n|-------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| Get the size of the list                                                                                                                                    | list.size                                                                               | O(1)                                                                                                                             |\n| Add element to list                                                                                                                                         | list.add(element)                                                                       | O(1) unless a new backing array needs to be created. In this case all the old values will need to be copied over making it O(n)  |\n| Add element at index                                                                                                                                        | list.add(index, element)                                                                | O(n)                                                                                                                             |\n| Get element at index                                                                                                                                        | list.get(index)                                                                         | O(1)                                                                                                                             |\n| Remove a specific element                                                                                                                                   | list.remove(element)                                                                    | O(n)                                                                                                                             |\n| Remove an element at a specific index                                                                                                                       | list.removeAt(index)                                                                    | O(n)                                                                                                                             |\n| Get the index of a specific element                                                                                                                         | list.indexOf(element)                                                                   | O(n)                                                                                                                             |\n| Check if the list contains an element                                                                                                                       | list.contains(element)                                                                  | O(n)                                                                                                                             |\n| Check if the list is null or empty                                                                                                                          | list.isNullOrEmpty()                                                                    | O(1)                                                                                                                             |\n| randomly shuffle list in place                                                                                                                              | list.shuffle()                                                                          | O(n)                                                                                                                             |\n| return randomly shuffled version of a list                                                                                                                  | val shuffled = list.shuffled()                                                          | O(n)                                                                                                                             |\n| sort list in place by natural order                                                                                                                         | list.sort()                                                                             | O(nlogn)                                                                                                                         |\n| return sorted list by natural order                                                                                                                         | val s = list.sorted()                                                                   | O(nlogn)                                                                                                                         |\n| sort list in place in descending order                                                                                                                      | list.sortByDescending{ it }                                                             | O(nlogn)                                                                                                                         |\n| return sorted list in descending order                                                                                                                      | val s = list.sortedByDescending{ it }                                                   | O(nlogn)                                                                                                                         |\n| sort list in place according to its natural order based on the returned property of the expression. This can be used to sort objects by a certain property. | val values = mutableListOf(1 to \"a\", 2 to \"b\")  values.sortBy { it.second }             | O(nlogn)                                                                                                                         |\n| return sorted list according to its natural order based on the returned property of the expression. This can be used to sort objects by a certain property. | val values = mutableListOf(1 to \"a\", 2 to \"b\") val sorted = values.sortBy { it.second } | O(nlogn)                                                                                                                         |\n| Return a read only view of a portion of a list from starting index (inclusive) until end index (exclusive)                                                  | val list =  listOf(1, 2, 3, 4, 5) val s = list.subList(2, 4) // [3, 4]                  | O(1) since its backed by the source array                                                                                        |\n| Return list as an array                                                                                                                                     | val arr = list.toTypedArray()                                                                | O(n)                                                                                                                             |\n\n## Linked List\nThis data structure is rarely used and for this reason Kotlin has opted to not implement it. [Here](https://discuss.kotlinlang.org/t/why-kotlin-does-not-provide-linkedlist-implementation/15991) is a thread on why they opted to not support it natively but you are still able to achieve this functionality using the [Java LinkedList](https://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html). It is worth noting that this class is a [doubly linked list](https://en.wikipedia.org/wiki/Doubly_linked_list).\n\n### Creating a Linked List\nBy importing `import java.util.LinkedList` you are able to instantiate it the way you would any other class.\n```kotlin\nimport java.util.LinkedList\nval list = listOf(\"Dog\", \"Cat\", \"Lion\")\nval linkedList =  LinkedList<String>()\nlinkedList.addAll(list) \nprintln(linkedList) // [Dog, Cat, Lion]\nlinkedList.add(\"Parrot\")\nprintln(linkedList) // [Dog, Cat, Lion, Parrot]\n```\n### Linked List Methods and Runtimes\n| Action                                             | Method                         | Runtime                              |\n|----------------------------------------------------|--------------------------------|--------------------------------------|\n| Append element to the end of the linked list       | linkedList.add(element)        | O(1)                                 |\n| Add element at a specific index in the linked list | linkedList.add(index, element) | O(n)                                 |\n| Get element at index in the linked list            | linkedList.get(index)          | O(n)                                 |\n| Remove an element from the linked list             | linkedList.remove(element)     | O(1)                                 |\n| Remove element at a specific index                 | linkedList.removeAt(index)     | O(n)                                 |\n| Check if a linked list contains an element         | linkedList.contains(element)   | O(n)                                 |\n| Return the linked list in reverse order            | val r = linkedList.reversed()  | O(1) since the list is doubly linked |\n\n## Set\nA [Set](https://kotlinlang.org/docs/collections-overview.html#set) stores unique elements. Like all collections in Kotlin, we have the [read only set](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/) and the [MutableSet](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-set/) which offers write access. In some cases, the order of a set is not reliable, that is to say that the order of insertion is not maintained. However, the default implementation of a set in Kotlin uses a [LinkedHashSet](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-linked-hash-set/), meaning the order of insertion is preserved.\n\n### Creating a Set\n- A `read only` set can be created using the `setOf` function\n```kotlin\nval mySet = setOf(1, 2, 3, 4) //implicit type declaration\nval mySet2 = setOf<Int>(1, 2, 3, 4) // explicit type declaration\n```\n- A mutable set can be created using the `mutableSetOf` function\n```kotlin\nval mySet = mutableSetOf(1, 2, 3, 4) //implicit type declaration\nval mySet2 = mutableSetOf<Int>(1, 2, 3, 4) // explicit type declaration\nmySet.add(5)\nmySet.add(3)\nprintln(mySet2) // [1, 2, 3, 4, 5], notice how 4 was not added twice\n```\n\n### Set Methods and Runtimes\n| Action                             | Method                  | Runtime |\n|------------------------------------|-------------------------|---------|\n| Get the size of the set            | mySet.size              | O(1)    |\n| Add element to the set             | mySet.add(element)      | O(1)    |\n| Remove element from set            | mySet.remove(element)   | O(1)    |\n| Check if a set contains an element | mySet.contains(element) | O(1)    |\n\n## Map\nA [Map](https://kotlinlang.org/docs/collections-overview.html#map) stores key value pairs with unique keys. Values in the map can be stored more than once if they are stored under different keys. Similarly to the set, some implementations of this `interface` do not preserve order, however, the default implementation of [LinkedHashMap](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-linked-hash-map/) does.\n\n### Creating a Map\n- A `read only` map can be created using the `mapOf` function\n- A map will always have a `type for the key` and a `type for the value` so you need to be mindful of that when explicitly declaring a map\n```kotlin\nval numsMap = mapOf(\"one\" to 1, \"two\" to 2, \"three\" to 3) //implicit type declaration\nval numsMap2 = mapOf<String, Int>(\"one\" to 1, \"two\" to 2, \"three\" to 3) // explicit type declaration\n// The above will create a map of type <String, Int> with the key/values {one=1, two=2, three=3}\n```\n- A mutable map can be created using the `mutableMapOf` function\n```kotlin\nval numsMap = mutableMapOf(\"one\" to 1, \"two\" to 2, \"three\" to 3) //implicit type declaration\nval numsMap2 = mutableMapOf<String, Int>(\"one\" to 1, \"two\" to 2, \"three\" to 3) // explicit type \nprintln(numsMap) // {one=1, two=2, three=3}\nnumsMap.put(\"five\", 5) // add an entry\nprintln(numsMap) // {one=1, two=2, three=3, five=5}\nprintln(numsMap.get(\"three\")) // 3\nnumsMap.remove(\"one\") // remove an enrty\nprintln(numsMap) // {two=2, three=3, five=5}\n```\n\n### Map Methods and Runtimes\n| Action                          | Method                     | Runtime | Alternative                          |\n|---------------------------------|----------------------------|---------|--------------------------------------|\n| Get the size of the map         | myMap.size                 | O(1)    |                                      |\n| Add/modify an entry to the map  | myMap.put(key, value)      | O(1)    | myMap[key] = value                   |\n| Remove an entry from the map    | myMap.remove(key)          | O(1)    |                                      |\n| Check if map contains a key     | myMap.contains(key)        | O(1)    | myMap.contains(key).let {...}        |\n| Check if a map contains a value | myMap.containsValue(value) | O(n)    | myMap.containsValue(value).let {...} |\n\n## Heap\n[Heaps](https://en.wikipedia.org/wiki/Heap_(data_structure)) are great! There are generally two types of heaps - a min heap which stores the minimum element at the root of the tree, and a max heap which stores the largest value at the root. In Kotlin, we can leverage the [PriorityQueue](https://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html)  to create this data structure. \n\n### Creating a Min Heap with a Priority Queue\nThe default implementation of a PriorityQueue actually gives us the min heap functionality. Since Kotlin does not support this out of the box, you will need to `import java.util.PriorityQueue`. Once you've imported PriorityQueue, you can declare one like this.\n\n```kotlin\nimport java.util.PriorityQueue\nval nums = listOf(5, 2, 4, 1, 3)\nval minHeap = PriorityQueue<Int>() // declare a min heap with int values\nminHeap.addAll(nums) // you can add elements of a Collection with addAll assuming they are the same type\nprintln(minHeap) // [1, 2, 4, 5, 3]\nminHeap.add(0)\nprintln(minHeap) // [0, 2, 1, 5, 3, 4]\nval min = minHeap.poll() // 0, removes 0 from the heap\nprintln(minHeap) // [1, 2, 4, 5, 3] since 1 is not the smallest value\nval min2 = minHeap.peek() // returns 1 but does not remove it from the heap\nprintln(min2) // 1\nprintln(minHeap) // [1, 2, 4, 5, 3]\n```\n\n### Creating a Max Heap with a PriorityQueue\nTo turn our PriorityQueue into a max heap, we will need to pass it an instance of [comparator](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-comparator/). Luckily most of the common comparators you'd want to use can be found [here](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.comparisons/). The one that will enable our max heap functionality is the [compareByDescending](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.comparisons/compare-by-descending.html#comparebydescending) function. This will tell our PriorityQueue to give the highest priority to the highest value.\n\n```kotlin\nimport java.util.PriorityQueue\nval nums = listOf(5, 2, 4, 1, 3)\nval maxHeap = PriorityQueue<Int>(compareByDescending{it})\nmaxHeap.addAll(nums)\nprintln(maxHeap) // [5, 3, 4, 1, 2]\nmaxHeap.add(0)\nprintln(maxHeap) // [5, 3, 4, 1, 2, 0]\nval max = maxHeap.poll() // returns and removes 5 from the heap\nprintln(max) // 5\nprintln(maxHeap) // [4, 3, 0, 1, 2]\nval max2 = maxHeap.peek()  // returns 4 but does not remove it from the heap\nprintln(max2) // 4\nprintln(maxHeap) // [4, 3, 0, 1, 2]\n```\n\n### Heap (PriorityQueue) Methods and Runtimes\n| Action                                                             | Method                 | Runtime                                           |\n|--------------------------------------------------------------------|------------------------|---------------------------------------------------|\n| Get the size of the heap                                           | heap.size              | O(1)                                              |\n| Add element to heap                                                | heap.add(element)      | O(logn)                                           |\n| Add a collection of elements to a heap (does not work with arrays) | heap.addAll(list)      | O(nlogn)                                          |\n| Return and remove the root of the heap (min/max value)             | heap.poll()            | O(logn) since we will need to re heapify the heap |\n| Return the root of the heap (min/max)                              | heap.peek()            | O(1) as no reconstruction is needed               |\n| Remove a specific element from the heap                            | heap.remove(element)   | O(n)                                              |\n| Check if an element is present in the heap                         | heap.contains(element) | O(n)                                              |\n\n## Stacks\nA [Stack](https://en.wikipedia.org/wiki/Stack_(abstract_data_type)) is a `last in, first out`, or `LIFO` for short, data structure. You can think of this as a stack of plates, where the first plate you grab is going to be the top most plate (the one that was added last). Again, Kotlin does not provide an implementation of this out of the box for us, so we must rely on our older brother Java. Java has a [Stack](https://docs.oracle.com/javase/7/docs/api/java/util/Stack.html) class but as per the documentation, it is recommended to use an [ArrayDeque](https://docs.oracle.com/javase/7/docs/api/java/util/ArrayDeque.html) for all you stack/queue needs. For more information on this decision you can check out [this thread](https://stackoverflow.com/questions/12524826/why-should-i-use-deque-over-stack). Once you `import java.util.ArrayDeque` you are ready to get started.\n\n### Creating a Stack\nWe can use ArrayDeque for both `LIFI` and `FIFO` (first in first out) structures, but by always pushing/popping from the front of the stack, we can get the desired stack behaviour. \n```kotlin\nimport java.util.ArrayDeque\n\nval stack = ArrayDeque<Int>()\nstack.push(1)\nstack.push(2)\nstack.push(3)\nstack.push(4)\nprintln(stack)           // [4, 3, 2, 1]\nprintln(stack.isEmpty()) // false\nprintln(stack.peek())    // 4\nprintln(stack)           // [4, 3, 2, 1]\nprintln(stack.pop())     // 4\nprintln(stack)           // [3, 2, 1]\nstack.push(9)\nprintln(stack)           // --> [9, 3, 2, 1]\n```\n\n### Stack (ArrayDeque) Methods and Runtimes\n| Action                                                 | Method                | Runtime |\n|--------------------------------------------------------|-----------------------|---------|\n| Get the size of the stack                              | stack.size            | O(1)    |\n| Push element onto the stack                            | stack.push(element)   | O(1)    |\n| Return and remove a the last element from the stack    | stack.pop()           | O(1)    |\n| Return the last element from the stack (do not remove) | stack.peek()          | O(1)    |\n| Remove a specific element from the stack               | stack.remove(element) | O(n)    |\n| Check if the stack is empty                            | stack.isEmpty()       | O(1)    |\n\n## Queue\nA queue is a `first in first out` or `FIFO` for short, data structure. You can think of a queue as your average lineup to get into a concert. The earlier you get there the earlier you'll get in. [Queue](https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html) is an interface that can be implemented by either an [ArrayDeque](https://docs.oracle.com/javase/7/docs/api/java/util/ArrayDeque.html), [PriorityQueue](https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html) or [LinkedList](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html) (there are more options but these are by far the most common). \n\n### Creating a Queue\nSince PriorityQueue will add extra functionality we don't need (see heap section above), and the LinkedList is not very cache friendly, it is advised to use `ArrayDeque` to implement a queue. To get started you will need to import `import java.util.Queue` and `import java.util.ArrayDeque`.\n\n```kotlin\nimport java.util.ArrayDeque\nimport java.util.Queue\n\nval queue: Queue<Int> = ArrayDeque<Int>()\nqueue.add(1)\nqueue.add(2)\nqueue.add(3)\nqueue.add(4)\nprintln(queue) // [1, 2, 3, 4]    \nprintln(queue.isEmpty()) // false\nprintln(queue.peek()) // 1\nprintln(queue) // [1, 2, 3, 4]      \nprintln(queue.poll()) // 1  \nprintln(queue) // [2, 3, 4]\nqueue.add(9) \nprintln(queue) // [2, 3, 4, 9]\n```\nby implementing the interface `Queue`, we no longer have access to the methods `push` and `pop` like we did in the `stack` example above.\n\n### Queue Methods and Runtimes\n| Action                                                  | Method                                     | Runtime |\n|---------------------------------------------------------|--------------------------------------------|---------|\n| Get the size of the queue                               | queue.size                                 | O(1)    |\n| Add element to the queue                                | queue.add(element) or queue.offer(element) | O(1)    |\n| Return and remove a the first element from the queue    | queue.poll()                               | O(1)    |\n| Return the first element from the queue (do not remove) | queue.peek()                               | O(1)    |\n| Remove a specific element from the queue                | queue.remove(element)                      | O(n)    |\n| Check if the stack is empty                             | queue.isEmpty()                            | O(1)    |\n\n## Undirected Graphs\nThere is no default Graph implementation in Kotlin, however, you can easily create one using a [HashMap](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-hash-map/) of [HashSets](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-hash-set/). Essentially, the adjacency list is stored in a HashMap, which holds a HashSet of nodes.\n\n### Creating a Graph\n```kotlin\nclass Graph<T> {\n    val adjacencyMap: HashMap<T, HashSet<T>> = HashMap()\n    fun addEdge(sourceVertex: T, destinationVertex: T) {\n        // Add edge to source vertex / node.\n        adjacencyMap\n            .computeIfAbsent(sourceVertex) { HashSet() }\n            .add(destinationVertex)\n        // Add edge to destination vertex / node.\n        adjacencyMap\n            .computeIfAbsent(destinationVertex) { HashSet() }\n            .add(sourceVertex)\n    }\n}\n```\nThe `computeIfAbsent` will create the edge if it is not present, and add the vertex to that edge. Since we are using maps/sets behind the scenes, our runtime for adding an edge remains constant with `O(1)` insertion.\n\n\n\n","html":"<h1>Common Data Structures in Kotlin</h1>\n<p>Recently, I have been using a lot more data structures in Kotlin but found there was a lack of information for <code class=\"language-text\">Kotlin</code> vs its older brother, <code class=\"language-text\">Java</code>. Here, I have tried to compile a list of common data structures with their runtimes and syntax in Kotlin.\nIt’s worth noting that because <code class=\"language-text\">Kotlin is backwards compatible with Java</code>, you may use all the <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Collections.html\">collections you are used to in Java</a>. The main difference between <a href=\"https://kotlinlang.org/docs/collections-overview.html\">Kotlin collections</a> and its Java counterpart, is the concept of a <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-collection/\">mutable collection</a>. <code class=\"language-text\">Immutable collections are read only</code>, where as the mutable collections allow for adding, removing and updating elements in the collection. Since <code class=\"language-text\">mutable</code> collections are inherently …mutable… you do not need to instantiate them with <code class=\"language-text\">var</code> as the reference will not be changing - only the contents of the collection will change.</p>\n<h2>Arrays</h2>\n<p><a href=\"https://kotlinlang.org/docs/basic-types.html#arrays\">Arrays in Kotlin</a> are primitive data structures that are fixed in size, and allow for getting and setting values in constant time.</p>\n<h3>Creating an Array</h3>\n<ul>\n<li>Using <code class=\"language-text\">arrayOf</code>\n<ul>\n<li>Here you can pass in the values for the array and the array will be created with the proper size, type and elements</li>\n<li>You can also use <code class=\"language-text\">arrayOfNulls</code> to create an array of a given size with all null values</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\">\t<span class=\"token comment\">// Create an array with values</span>\n\t<span class=\"token keyword\">val</span> nums1 <span class=\"token operator\">=</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//implicit type declaration</span>\n\t<span class=\"token keyword\">val</span> nums2 <span class=\"token operator\">=</span> arrayOf<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//explicit type declaration</span>\n\t<span class=\"token comment\">// Creates an Array&lt;Int?> of size 4 with values [null, null, null, null]</span>\n\t<span class=\"token keyword\">val</span> nulls<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> arrayOfNulls<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>Using the Array <code class=\"language-text\">constructor</code></li>\n<li>The constructor takes…\n<ul>\n<li>The size of the array</li>\n<li>A function that returns the array value given an index</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\">\t<span class=\"token comment\">// Creates an Array&lt;Int> with values [0, 1, 2, 3, 4]</span>\n\t<span class=\"token keyword\">val</span> nums <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> i <span class=\"token operator\">-></span> i<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// Creates an Array&lt;String> with values [\"0\", \"1\", \"4\", \"9\", \"16\"]</span>\n\t<span class=\"token keyword\">val</span> strings <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> i <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Primitive Arrays</h3>\n<p>Kotlin also provides Array classes for primitives that can offer some nice syntax. The options are the following</p>\n<ul>\n<li>ByteArray</li>\n<li>CharArray</li>\n<li>ShortArray</li>\n<li>IntArray</li>\n<li>LongArray</li>\n<li>DoubleArray</li>\n<li>FloatArray</li>\n<li>BooleanArray</li>\n</ul>\n<p>You can create these arrays by passing the values of the array, the size of the array or the size and a lambda expression.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\">\t<span class=\"token comment\">// Array of int of size 3 with values [1, 2, 3]</span>\n\t<span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span>  <span class=\"token function\">intArrayOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Array of booleans of size 3 with values [true, false, true]</span>\n\t<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span>  <span class=\"token function\">booleanArrayOf</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Array of int of size 5 with values [0, 0, 0, 0, 0]</span>\n\t<span class=\"token keyword\">val</span> arr3 <span class=\"token operator\">=</span> <span class=\"token function\">IntArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Array of chars of size 5 with values [, , , , ]</span>\n\t<span class=\"token keyword\">val</span> arr4 <span class=\"token operator\">=</span> <span class=\"token function\">CharArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Array of int of size 5 with values [42, 42, 42, 42, 42]  </span>\n\t<span class=\"token keyword\">val</span> arr5 <span class=\"token operator\">=</span>  <span class=\"token function\">IntArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>  <span class=\"token number\">42</span>  <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// Array of int of size 5 with values [0, 1, 2, 3, 4] </span>\n\t<span class=\"token comment\">// (values initialised to their index value)  </span>\n\t<span class=\"token keyword\">var</span> arr6 <span class=\"token operator\">=</span>  <span class=\"token function\">IntArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span> it <span class=\"token operator\">-></span> it  <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Array Methods and Runtimes</h3>\n<table>\n<thead>\n<tr>\n<th>Action</th>\n<th>Method</th>\n<th>Time Complexity</th>\n<th>Alternative</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Access value at index</td>\n<td>array.get(index)</td>\n<td>O(1)</td>\n<td>array[index]</td>\n</tr>\n<tr>\n<td>Set value at index</td>\n<td>array.set(index, value)</td>\n<td>O(1)</td>\n<td>array[index] = value</td>\n</tr>\n<tr>\n<td>Sort array in place by natural order</td>\n<td>array.sort()</td>\n<td>O(nlogn)</td>\n<td></td>\n</tr>\n<tr>\n<td>Sort array in place in reverse order</td>\n<td>array.sortDescending()</td>\n<td>O(nlogn)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>Lists</h2>\n<p>Similarly to the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">Java list</a>, the <a href=\"https://kotlinlang.org/docs/collections-overview.html#list\">Kotlin List</a> is an interface that allows you to store elements in a specified order with indexed access to these elements. It also allows for the growing and shrinking of the list (if the list is mutable). The default implementation of <code class=\"language-text\">List</code> in Kotlin is an <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/\">ArrayList</a> but others are available.</p>\n<h3>Creating A List</h3>\n<ul>\n<li>A <code class=\"language-text\">read only</code> list can be created using the <code class=\"language-text\">listOf()</code> function.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> numbers <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"four\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//implicit type declaration</span>\n<span class=\"token keyword\">val</span> numbers2 <span class=\"token operator\">=</span> listOf<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"four\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// explicit type declaration</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<ul>\n<li>A mutable list can be created using <code class=\"language-text\">mutableListOf()</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> numbers <span class=\"token operator\">=</span> <span class=\"token function\">mutableListOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//implicit type declaration</span>\n<span class=\"token keyword\">val</span> numbers2 <span class=\"token operator\">=</span> mutableListOf<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// explicit type declaration</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h3>List Methods and Runtimes</h3>\n<table>\n<thead>\n<tr>\n<th>Action</th>\n<th>Method</th>\n<th>Runtime</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Get the size of the list</td>\n<td>list.size</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Add element to list</td>\n<td>list.add(element)</td>\n<td>O(1) unless a new backing array needs to be created. In this case all the old values will need to be copied over making it O(n)</td>\n</tr>\n<tr>\n<td>Add element at index</td>\n<td>list.add(index, element)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Get element at index</td>\n<td>list.get(index)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Remove a specific element</td>\n<td>list.remove(element)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Remove an element at a specific index</td>\n<td>list.removeAt(index)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Get the index of a specific element</td>\n<td>list.indexOf(element)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Check if the list contains an element</td>\n<td>list.contains(element)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Check if the list is null or empty</td>\n<td>list.isNullOrEmpty()</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>randomly shuffle list in place</td>\n<td>list.shuffle()</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>return randomly shuffled version of a list</td>\n<td>val shuffled = list.shuffled()</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>sort list in place by natural order</td>\n<td>list.sort()</td>\n<td>O(nlogn)</td>\n</tr>\n<tr>\n<td>return sorted list by natural order</td>\n<td>val s = list.sorted()</td>\n<td>O(nlogn)</td>\n</tr>\n<tr>\n<td>sort list in place in descending order</td>\n<td>list.sortByDescending{ it }</td>\n<td>O(nlogn)</td>\n</tr>\n<tr>\n<td>return sorted list in descending order</td>\n<td>val s = list.sortedByDescending{ it }</td>\n<td>O(nlogn)</td>\n</tr>\n<tr>\n<td>sort list in place according to its natural order based on the returned property of the expression. This can be used to sort objects by a certain property.</td>\n<td>val values = mutableListOf(1 to “a”, 2 to “b”)  values.sortBy { it.second }</td>\n<td>O(nlogn)</td>\n</tr>\n<tr>\n<td>return sorted list according to its natural order based on the returned property of the expression. This can be used to sort objects by a certain property.</td>\n<td>val values = mutableListOf(1 to “a”, 2 to “b”) val sorted = values.sortBy { it.second }</td>\n<td>O(nlogn)</td>\n</tr>\n<tr>\n<td>Return a read only view of a portion of a list from starting index (inclusive) until end index (exclusive)</td>\n<td>val list =  listOf(1, 2, 3, 4, 5) val s = list.subList(2, 4) // [3, 4]</td>\n<td>O(1) since its backed by the source array</td>\n</tr>\n<tr>\n<td>Return list as an array</td>\n<td>val arr = list.toTypedArray()</td>\n<td>O(n)</td>\n</tr>\n</tbody>\n</table>\n<h2>Linked List</h2>\n<p>This data structure is rarely used and for this reason Kotlin has opted to not implement it. <a href=\"https://discuss.kotlinlang.org/t/why-kotlin-does-not-provide-linkedlist-implementation/15991\">Here</a> is a thread on why they opted to not support it natively but you are still able to achieve this functionality using the <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html\">Java LinkedList</a>. It is worth noting that this class is a <a href=\"https://en.wikipedia.org/wiki/Doubly_linked_list\">doubly linked list</a>.</p>\n<h3>Creating a Linked List</h3>\n<p>By importing <code class=\"language-text\">import java.util.LinkedList</code> you are able to instantiate it the way you would any other class.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>LinkedList\n<span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lion\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> linkedList <span class=\"token operator\">=</span>  LinkedList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> \n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>linkedList<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [Dog, Cat, Lion]</span>\nlinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parrot\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>linkedList<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [Dog, Cat, Lion, Parrot]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Linked List Methods and Runtimes</h3>\n<table>\n<thead>\n<tr>\n<th>Action</th>\n<th>Method</th>\n<th>Runtime</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Append element to the end of the linked list</td>\n<td>linkedList.add(element)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Add element at a specific index in the linked list</td>\n<td>linkedList.add(index, element)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Get element at index in the linked list</td>\n<td>linkedList.get(index)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Remove an element from the linked list</td>\n<td>linkedList.remove(element)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Remove element at a specific index</td>\n<td>linkedList.removeAt(index)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Check if a linked list contains an element</td>\n<td>linkedList.contains(element)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Return the linked list in reverse order</td>\n<td>val r = linkedList.reversed()</td>\n<td>O(1) since the list is doubly linked</td>\n</tr>\n</tbody>\n</table>\n<h2>Set</h2>\n<p>A <a href=\"https://kotlinlang.org/docs/collections-overview.html#set\">Set</a> stores unique elements. Like all collections in Kotlin, we have the <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/\">read only set</a> and the <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-set/\">MutableSet</a> which offers write access. In some cases, the order of a set is not reliable, that is to say that the order of insertion is not maintained. However, the default implementation of a set in Kotlin uses a <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-linked-hash-set/\">LinkedHashSet</a>, meaning the order of insertion is preserved.</p>\n<h3>Creating a Set</h3>\n<ul>\n<li>A <code class=\"language-text\">read only</code> set can be created using the <code class=\"language-text\">setOf</code> function</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> mySet <span class=\"token operator\">=</span> <span class=\"token function\">setOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//implicit type declaration</span>\n<span class=\"token keyword\">val</span> mySet2 <span class=\"token operator\">=</span> setOf<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// explicit type declaration</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<ul>\n<li>A mutable set can be created using the <code class=\"language-text\">mutableSetOf</code> function</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> mySet <span class=\"token operator\">=</span> <span class=\"token function\">mutableSetOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//implicit type declaration</span>\n<span class=\"token keyword\">val</span> mySet2 <span class=\"token operator\">=</span> mutableSetOf<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// explicit type declaration</span>\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mySet2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3, 4, 5], notice how 4 was not added twice</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Set Methods and Runtimes</h3>\n<table>\n<thead>\n<tr>\n<th>Action</th>\n<th>Method</th>\n<th>Runtime</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Get the size of the set</td>\n<td>mySet.size</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Add element to the set</td>\n<td>mySet.add(element)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Remove element from set</td>\n<td>mySet.remove(element)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Check if a set contains an element</td>\n<td>mySet.contains(element)</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n<h2>Map</h2>\n<p>A <a href=\"https://kotlinlang.org/docs/collections-overview.html#map\">Map</a> stores key value pairs with unique keys. Values in the map can be stored more than once if they are stored under different keys. Similarly to the set, some implementations of this <code class=\"language-text\">interface</code> do not preserve order, however, the default implementation of <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-linked-hash-map/\">LinkedHashMap</a> does.</p>\n<h3>Creating a Map</h3>\n<ul>\n<li>A <code class=\"language-text\">read only</code> map can be created using the <code class=\"language-text\">mapOf</code> function</li>\n<li>A map will always have a <code class=\"language-text\">type for the key</code> and a <code class=\"language-text\">type for the value</code> so you need to be mindful of that when explicitly declaring a map</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> numsMap <span class=\"token operator\">=</span> <span class=\"token function\">mapOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span> <span class=\"token keyword\">to</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span> <span class=\"token keyword\">to</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span> <span class=\"token keyword\">to</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//implicit type declaration</span>\n<span class=\"token keyword\">val</span> numsMap2 <span class=\"token operator\">=</span> mapOf<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span> <span class=\"token keyword\">to</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span> <span class=\"token keyword\">to</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span> <span class=\"token keyword\">to</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// explicit type declaration</span>\n<span class=\"token comment\">// The above will create a map of type &lt;String, Int> with the key/values {one=1, two=2, three=3}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>A mutable map can be created using the <code class=\"language-text\">mutableMapOf</code> function</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> numsMap <span class=\"token operator\">=</span> <span class=\"token function\">mutableMapOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span> <span class=\"token keyword\">to</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span> <span class=\"token keyword\">to</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span> <span class=\"token keyword\">to</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//implicit type declaration</span>\n<span class=\"token keyword\">val</span> numsMap2 <span class=\"token operator\">=</span> mutableMapOf<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span> <span class=\"token keyword\">to</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span> <span class=\"token keyword\">to</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span> <span class=\"token keyword\">to</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// explicit type </span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>numsMap<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {one=1, two=2, three=3}</span>\nnumsMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"five\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// add an entry</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>numsMap<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {one=1, two=2, three=3, five=5}</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>numsMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\nnumsMap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// remove an enrty</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>numsMap<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {two=2, three=3, five=5}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Map Methods and Runtimes</h3>\n<table>\n<thead>\n<tr>\n<th>Action</th>\n<th>Method</th>\n<th>Runtime</th>\n<th>Alternative</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Get the size of the map</td>\n<td>myMap.size</td>\n<td>O(1)</td>\n<td></td>\n</tr>\n<tr>\n<td>Add/modify an entry to the map</td>\n<td>myMap.put(key, value)</td>\n<td>O(1)</td>\n<td>myMap[key] = value</td>\n</tr>\n<tr>\n<td>Remove an entry from the map</td>\n<td>myMap.remove(key)</td>\n<td>O(1)</td>\n<td></td>\n</tr>\n<tr>\n<td>Check if map contains a key</td>\n<td>myMap.contains(key)</td>\n<td>O(1)</td>\n<td>myMap.contains(key).let {…}</td>\n</tr>\n<tr>\n<td>Check if a map contains a value</td>\n<td>myMap.containsValue(value)</td>\n<td>O(n)</td>\n<td>myMap.containsValue(value).let {…}</td>\n</tr>\n</tbody>\n</table>\n<h2>Heap</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/Heap_(data_structure)\">Heaps</a> are great! There are generally two types of heaps - a min heap which stores the minimum element at the root of the tree, and a max heap which stores the largest value at the root. In Kotlin, we can leverage the <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html\">PriorityQueue</a>  to create this data structure.</p>\n<h3>Creating a Min Heap with a Priority Queue</h3>\n<p>The default implementation of a PriorityQueue actually gives us the min heap functionality. Since Kotlin does not support this out of the box, you will need to <code class=\"language-text\">import java.util.PriorityQueue</code>. Once you’ve imported PriorityQueue, you can declare one like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>PriorityQueue\n<span class=\"token keyword\">val</span> nums <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> minHeap <span class=\"token operator\">=</span> PriorityQueue<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// declare a min heap with int values</span>\nminHeap<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token comment\">// you can add elements of a Collection with addAll assuming they are the same type</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minHeap<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 4, 5, 3]</span>\nminHeap<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minHeap<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [0, 2, 1, 5, 3, 4]</span>\n<span class=\"token keyword\">val</span> min <span class=\"token operator\">=</span> minHeap<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0, removes 0 from the heap</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minHeap<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 4, 5, 3] since 1 is not the smallest value</span>\n<span class=\"token keyword\">val</span> min2 <span class=\"token operator\">=</span> minHeap<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 1 but does not remove it from the heap</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>min2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minHeap<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 4, 5, 3]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Creating a Max Heap with a PriorityQueue</h3>\n<p>To turn our PriorityQueue into a max heap, we will need to pass it an instance of <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-comparator/\">comparator</a>. Luckily most of the common comparators you’d want to use can be found <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.comparisons/\">here</a>. The one that will enable our max heap functionality is the <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.comparisons/compare-by-descending.html#comparebydescending\">compareByDescending</a> function. This will tell our PriorityQueue to give the highest priority to the highest value.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>PriorityQueue\n<span class=\"token keyword\">val</span> nums <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> maxHeap <span class=\"token operator\">=</span> PriorityQueue<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>compareByDescending<span class=\"token punctuation\">{</span>it<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nmaxHeap<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>maxHeap<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [5, 3, 4, 1, 2]</span>\nmaxHeap<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>maxHeap<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [5, 3, 4, 1, 2, 0]</span>\n<span class=\"token keyword\">val</span> max <span class=\"token operator\">=</span> maxHeap<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns and removes 5 from the heap</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>maxHeap<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [4, 3, 0, 1, 2]</span>\n<span class=\"token keyword\">val</span> max2 <span class=\"token operator\">=</span> maxHeap<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// returns 4 but does not remove it from the heap</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>max2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>maxHeap<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [4, 3, 0, 1, 2]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Heap (PriorityQueue) Methods and Runtimes</h3>\n<table>\n<thead>\n<tr>\n<th>Action</th>\n<th>Method</th>\n<th>Runtime</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Get the size of the heap</td>\n<td>heap.size</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Add element to heap</td>\n<td>heap.add(element)</td>\n<td>O(logn)</td>\n</tr>\n<tr>\n<td>Add a collection of elements to a heap (does not work with arrays)</td>\n<td>heap.addAll(list)</td>\n<td>O(nlogn)</td>\n</tr>\n<tr>\n<td>Return and remove the root of the heap (min/max value)</td>\n<td>heap.poll()</td>\n<td>O(logn) since we will need to re heapify the heap</td>\n</tr>\n<tr>\n<td>Return the root of the heap (min/max)</td>\n<td>heap.peek()</td>\n<td>O(1) as no reconstruction is needed</td>\n</tr>\n<tr>\n<td>Remove a specific element from the heap</td>\n<td>heap.remove(element)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Check if an element is present in the heap</td>\n<td>heap.contains(element)</td>\n<td>O(n)</td>\n</tr>\n</tbody>\n</table>\n<h2>Stacks</h2>\n<p>A <a href=\"https://en.wikipedia.org/wiki/Stack_(abstract_data_type)\">Stack</a> is a <code class=\"language-text\">last in, first out</code>, or <code class=\"language-text\">LIFO</code> for short, data structure. You can think of this as a stack of plates, where the first plate you grab is going to be the top most plate (the one that was added last). Again, Kotlin does not provide an implementation of this out of the box for us, so we must rely on our older brother Java. Java has a <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Stack.html\">Stack</a> class but as per the documentation, it is recommended to use an <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/ArrayDeque.html\">ArrayDeque</a> for all you stack/queue needs. For more information on this decision you can check out <a href=\"https://stackoverflow.com/questions/12524826/why-should-i-use-deque-over-stack\">this thread</a>. Once you <code class=\"language-text\">import java.util.ArrayDeque</code> you are ready to get started.</p>\n<h3>Creating a Stack</h3>\n<p>We can use ArrayDeque for both <code class=\"language-text\">LIFI</code> and <code class=\"language-text\">FIFO</code> (first in first out) structures, but by always pushing/popping from the front of the stack, we can get the desired stack behaviour.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>ArrayDeque\n\n<span class=\"token keyword\">val</span> stack <span class=\"token operator\">=</span> ArrayDeque<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nstack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nstack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nstack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// [4, 3, 2, 1]</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 4</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// [4, 3, 2, 1]</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 4</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// [3, 2, 1]</span>\nstack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// --> [9, 3, 2, 1]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Stack (ArrayDeque) Methods and Runtimes</h3>\n<table>\n<thead>\n<tr>\n<th>Action</th>\n<th>Method</th>\n<th>Runtime</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Get the size of the stack</td>\n<td>stack.size</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Push element onto the stack</td>\n<td>stack.push(element)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Return and remove a the last element from the stack</td>\n<td>stack.pop()</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Return the last element from the stack (do not remove)</td>\n<td>stack.peek()</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Remove a specific element from the stack</td>\n<td>stack.remove(element)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Check if the stack is empty</td>\n<td>stack.isEmpty()</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n<h2>Queue</h2>\n<p>A queue is a <code class=\"language-text\">first in first out</code> or <code class=\"language-text\">FIFO</code> for short, data structure. You can think of a queue as your average lineup to get into a concert. The earlier you get there the earlier you’ll get in. <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html\">Queue</a> is an interface that can be implemented by either an <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/ArrayDeque.html\">ArrayDeque</a>, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html\">PriorityQueue</a> or <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html\">LinkedList</a> (there are more options but these are by far the most common).</p>\n<h3>Creating a Queue</h3>\n<p>Since PriorityQueue will add extra functionality we don’t need (see heap section above), and the LinkedList is not very cache friendly, it is advised to use <code class=\"language-text\">ArrayDeque</code> to implement a queue. To get started you will need to import <code class=\"language-text\">import java.util.Queue</code> and <code class=\"language-text\">import java.util.ArrayDeque</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>ArrayDeque\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Queue\n\n<span class=\"token keyword\">val</span> queue<span class=\"token operator\">:</span> Queue<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span> <span class=\"token operator\">=</span> ArrayDeque<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nqueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nqueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nqueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nqueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3, 4]    </span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3, 4]      </span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1  </span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [2, 3, 4]</span>\nqueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span> \n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [2, 3, 4, 9]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>by implementing the interface <code class=\"language-text\">Queue</code>, we no longer have access to the methods <code class=\"language-text\">push</code> and <code class=\"language-text\">pop</code> like we did in the <code class=\"language-text\">stack</code> example above.</p>\n<h3>Queue Methods and Runtimes</h3>\n<table>\n<thead>\n<tr>\n<th>Action</th>\n<th>Method</th>\n<th>Runtime</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Get the size of the queue</td>\n<td>queue.size</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Add element to the queue</td>\n<td>queue.add(element) or queue.offer(element)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Return and remove a the first element from the queue</td>\n<td>queue.poll()</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Return the first element from the queue (do not remove)</td>\n<td>queue.peek()</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Remove a specific element from the queue</td>\n<td>queue.remove(element)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Check if the stack is empty</td>\n<td>queue.isEmpty()</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n<h2>Undirected Graphs</h2>\n<p>There is no default Graph implementation in Kotlin, however, you can easily create one using a <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-hash-map/\">HashMap</a> of <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-hash-set/\">HashSets</a>. Essentially, the adjacency list is stored in a HashMap, which holds a HashSet of nodes.</p>\n<h3>Creating a Graph</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-kotlin line-numbers\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Graph<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> adjacencyMap<span class=\"token operator\">:</span> HashMap<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> HashSet<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">addEdge</span><span class=\"token punctuation\">(</span>sourceVertex<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span> destinationVertex<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Add edge to source vertex / node.</span>\n        adjacencyMap\n            <span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span>sourceVertex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">HashSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>destinationVertex<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Add edge to destination vertex / node.</span>\n        adjacencyMap\n            <span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span>destinationVertex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">HashSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>sourceVertex<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The <code class=\"language-text\">computeIfAbsent</code> will create the edge if it is not present, and add the vertex to that edge. Since we are using maps/sets behind the scenes, our runtime for adding an edge remains constant with <code class=\"language-text\">O(1)</code> insertion.</p>","frontmatter":{"title":"Common Data Structures in Kotlin","date":"October 14, 2021","description":"An overview of common data structures, how to use them in Kotlin, and all of their time complexities.","time":10}}},"pageContext":{"slug":"/post-2/","previous":{"fields":{"slug":"/post-1/"},"frontmatter":{"title":"Welcome","categories":["about me"]}},"next":null}},
    "staticQueryHashes": ["3649515864","63159454"]}