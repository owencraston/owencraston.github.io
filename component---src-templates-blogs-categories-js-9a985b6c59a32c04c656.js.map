{"version":3,"file":"component---src-templates-blogs-categories-js-9a985b6c59a32c04c656.js","mappings":"6NAqHA,UA3GmB,SAAC,GAAc,IACxBA,EADuB,EAAXC,KACEC,kBAAdF,MAKR,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKG,MAAM,mBACX,gBAAC,KAAD,KACE,gBAAC,KAAD,KAEE,gBAAC,KAAD,iBAGA,gBAAC,KAAD,KACE,gBAAC,KAAD,kLAGA,gBAAC,IAAD,OAGF,gBAAC,KAAD,CAAiBC,UAAU,WACxBJ,EAAMK,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNH,EAAQG,EAAKC,YAAYJ,OAASG,EAAKE,OAAOC,KACpD,OACE,gBAAC,KAAD,CAAUC,IAAKJ,EAAKE,OAAOC,MACzB,uBAAKL,UAAU,SACb,uBAAKA,UAAU,iBACb,gBAAC,EAAAO,KAAD,CAAMC,GAAIN,EAAKE,OAAOC,MACpB,gBAAC,IAAD,CAAKI,MAAOP,EAAKC,YAAYO,MAAMC,gBAAgBF,MAAOV,MAAM,iBAGpE,gBAAC,KAAD,uBAEE,gBAAC,KAAD,CAAWa,KAAMV,EAAKC,YAAYU,YAAaC,OAAO,SAASf,MAAM,gBAClEG,EAAKC,YAAYU,eAKxB,uBAAKb,UAAU,WACb,8BACE,gBAAC,KAAD,KACE,wBAAMA,UAAU,gBAAgBE,EAAKC,YAAYY,WAAWd,KAAI,SAACe,EAAMC,GAAP,OAC9D,gBAAC,EAAAV,KAAD,CAAMC,GAAE,IAAMQ,EAAQV,IAAKW,GACzB,wBAAMjB,UAAU,4CAAhB,IAA6DgB,GAC5Dd,EAAKC,YAAYY,WAAWG,SAAWD,EAAQ,EAAI,wBAAMjB,UAAU,6BAAhB,OAAyD,OAHjH,MAOF,gBAAC,KAAD,KACE,gBAAC,EAAAO,KAAD,CAAMP,UAAU,eAAemB,MAAO,CAAEC,UAAU,QAAWZ,GAAIN,EAAKE,OAAOC,MAC1EN,IAGL,gBAAC,KAAD,KACE,gBAAC,IAAD,CAAUC,UAAU,4BAA4BqB,MAAM,KAAKC,OAAO,OAClE,wBAAMtB,UAAU,gBAAhB,qBAAkDE,EAAKC,YAAYoB,KAAnE,MAEF,gBAAC,KAAD,KACE,gBAAC,IAAD,CAAOvB,UAAU,4BAA4BqB,MAAM,KAAKC,OAAO,OAC/D,wBAAMtB,UAAU,gBAAhB,gBAA6CE,EAAKC,YAAYqB,KAA9D,OAGJ,gBAAC,KAAD,CACEC,wBAAyB,CACvBC,OAAQxB,EAAKC,YAAYwB,aAAezB,EAAK0B,WAGjD,gBAAC,EAAArB,KAAD,CAAMC,GAAIN,EAAKE,OAAOC,MACpB,gBAAC,KAAD,CAAUL,UAAU,cAApB","sources":["webpack://gatsby-portfolio/./src/templates/blogs/categories.js"],"sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\nimport { Calendar, Clock } from 'react-feather'\nimport Img from \"gatsby-image\"\nimport CategoriesTags from '../../components/CategoriesTags/categoriesTags';\nimport {ContainerLayout, WorkPost, Intro, SubTitle, Title, Text, HeaderIntro, SubText, SmallText, UnderLink, ReadMore} from \"../../components/common\"\nimport Layout from \"../../components/layout\"\nimport SEO from \"../../components/seo\"\n\nconst Categories = ({ data }) => {\n  const { edges} = data.allMarkdownRemark\n  // const tagHeader = `${totalCount} post${\n  //   totalCount === 1 ? \"\" : \"s\"\n  // } tagged with \"${category}\"`\n\n  return (\n    <Layout> \n      <SEO title=\"Blog Home Page\" />\n      <Intro>\n        <ContainerLayout>\n\n          <SubTitle>\n            Articles\n          </SubTitle>\n          <HeaderIntro>\n            <SubText>\n              Articles on software engineering, focused on Android, IOS, React Native and everything in between, with practical tips from real projects and my own personal experience.\n            </SubText>\n            <CategoriesTags /> \n          </HeaderIntro>\n\n          <ContainerLayout className=\"wrapper\">\n            {edges.map(({ node }) => {\n              const title = node.frontmatter.title || node.fields.slug\n              return (\n                <WorkPost key={node.fields.slug}>\n                  <div className=\"media\">\n                    <div className=\"image-wrapper\">\n                      <Link to={node.fields.slug}>\n                        <Img fluid={node.frontmatter.image.childImageSharp.fluid} title=\"work title\" />\n                      </Link> \n                    </div>\n                    <SmallText>\n                      Image Credits : \n                      <UnderLink href={node.frontmatter.imageCredit} target=\"_blank\" title=\"image credit\">\n                        {node.frontmatter.imageCredit}\n                      </UnderLink>\n                    </SmallText>\n                  </div>\n                  \n                  <div className=\"content\">\n                    <header>\n                      <SmallText> \n                        <span className=\"align-middle\">{node.frontmatter.categories.map((item, index) => (\n                          <Link to={`/${item}`} key={index}>\n                            <span className=\"align-middle text-primary text-underline\">#{item}</span>\n                            {node.frontmatter.categories.length !== index + 1 ? <span className=\"align-middle text-primary\"> , </span> : \"\"}\n                          </Link>\n                        ))} </span>\n                      </SmallText>\n                      <Title>\n                        <Link className=\"text-primary\" style={{ boxShadow: `none` }} to={node.fields.slug}>\n                          {title}\n                        </Link>\n                      </Title>\n                      <SmallText> \n                        <Calendar className=\"align-middle text-primary\" width=\"18\" height=\"18\" /> \n                        <span className=\"align-middle\"> date published : {node.frontmatter.date} </span>\n                      </SmallText>\n                      <SmallText> \n                        <Clock className=\"align-middle text-primary\" width=\"18\" height=\"18\" /> \n                        <span className=\"align-middle\"> read time : {node.frontmatter.time} </span>\n                      </SmallText>\n                    </header>\n                    <Text\n                      dangerouslySetInnerHTML={{\n                        __html: node.frontmatter.description || node.excerpt,\n                      }}\n                    />\n                    <Link to={node.fields.slug}>\n                      <ReadMore className=\"lined-link\"> read more &#8594; </ReadMore>\n                    </Link>\n                  </div>\n                </WorkPost>\n              )\n            })}\n          </ContainerLayout>\n        </ContainerLayout>\n      </Intro>\n    </Layout>\n  )\n}\n\nCategories.propTypes = {\n  pageContext: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Categories\n\nexport const pageQuery = graphql`\n  query($category: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            time\n            title\n            image {\n              childImageSharp {\n                fluid(maxWidth: 600, quality: 100) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            categories\n            description\n          }\n        }\n      }\n    }\n  }\n`"],"names":["edges","data","allMarkdownRemark","title","className","map","node","frontmatter","fields","slug","key","Link","to","fluid","image","childImageSharp","href","imageCredit","target","categories","item","index","length","style","boxShadow","width","height","date","time","dangerouslySetInnerHTML","__html","description","excerpt"],"sourceRoot":""}